# setup color variables
IS_ON=
RED=
GREEN=
YELLOW=
BLUE=
VIOLET=
AQUA=
WHITE=
GRAY=
BOLD=
BG_RED=
OFF=
if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
    IS_ON=true
    RED="\[$(/usr/bin/tput setaf 1)\]"
    GREEN="\[$(/usr/bin/tput setaf 2)\]"
    YELLOW="\[$(/usr/bin/tput setaf 3)\]"
    BLUE="\[$(/usr/bin/tput setaf 4)\]"
    VIOLET="\[$(/usr/bin/tput setaf 5)\]"
    AQUA="\[$(/usr/bin/tput setaf 6)\]"
    WHITE="\[$(/usr/bin/tput setaf 7)\]"
    GRAY="\[$(/usr/bin/tput setaf 8)\]"
    # BOLD="\[$(/usr/bin/tput bold)\]"
    OFF="\[$(/usr/bin/tput sgr0)\]"
    ERROR="$(/usr/bin/tput setab 1)$(/usr/bin/tput setaf 7)"
    ERROR_OFF="$(/usr/bin/tput sgr0)"
fi

function highlight_exit_code() {
    exit_code=$?
    if [ $exit_code -ne 0 ]; then
        echo "${RED}$exit_code${OFF} "
    fi
}

# # get git status
# function parse_git_status {
#     # clear git variables
#     GIT_BRANCH=
#     GIT_DIRTY=
#     GIT_DIRTY_CACHED=

#     # exit if no git found in system
#     local GIT_BIN=$(which git 2>/dev/null)
#     [[ -z "$GIT_BIN" ]] && return

#     # check we are in git repo
#     local CUR_DIR="$PWD"
#     while [ ! -d "${CUR_DIR}"/.git ] && [ "$CUR_DIR" != "" ]; do CUR_DIR=${CUR_DIR%/*}; done
#     [[ ! -d "${CUR_DIR}"/.git ]] && return

#     # 'git repo for dotfiles' fix: show git status only in home dir and other git repos
#     [[ "$CUR_DIR" == "$HOME" ]] && [[ "$PWD" != "$HOME" ]] && return

#     # get git branch
#     GIT_BRANCH=$($GIT_BIN symbolic-ref HEAD 2>/dev/null)
#     [[ -z "$GIT_BRANCH" ]] && return
#     GIT_BRANCH=${GIT_BRANCH#refs/heads/}

#     # get git status
#     [[ $(git diff --shortstat 2> /dev/null | tail -n1) != "" ]] && GIT_DIRTY=true
#     [[ $(git diff --cached 2> /dev/null | tail -n1) != "" ]] && GIT_DIRTY_CACHED=true
# }

# function prompt_command {

#     local PS1_GIT=
#     local PWDNAME=$PWD

#     # beautify working firectory name
#     if [ "$HOME" == "$PWD" ]; then
#         PWDNAME="~"
#     elif [ "$HOME" ==  ${PWD:0:${#HOME}} ]; then
#         PWDNAME="~${PWD:${#HOME}}"
#     fi

#     # parse git status and get git variables
#     parse_git_status

#     # build b/w prompt for git
#     [[ ! -z "$GIT_BRANCH" ]] && PS1_GIT=" (git: ${GIT_BRANCH})"

#     local color_user=
#     if $IS_ON; then
#         # set user color
#         case `id -u` in
#             0) color_user=$RED ;;
#             *) color_user=$GREEN ;;
#         esac

#         # build git status for prompt
#         if [ ! -z "$GIT_BRANCH" ]; then
#             if [ -z "$GIT_DIRTY" ]; then
#                 if [ -z "$GIT_DIRTY_CACHED" ]; then
#                     PS1_GIT=" [${BOLD}${RED}${GIT_BRANCH}${OFF}]"
#                 else
#                     PS1_GIT=" [${BOLD}${RED}${GIT_BRANCH}${YELLOW}*${OFF}]"
#                 fi
#             else
#                 PS1_GIT=" [${BOLD}${RED}${GIT_BRANCH}${WHITE}*${OFF}]"
#             fi
#         fi
#     fi

#     # set new color prompt
#     PS1="${BOLD}${color_user}${USER}@${HOSTNAME}${OFF} ${BOLD}${BLUE}${PWDNAME}${OFF}${PS1_GIT} ${BOLD}${BLUE}\$${OFF} "
# }

# function light_prompt_command {

#     parse_git_branch () {
#       git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/ \1/'
#     }

#     PS1="${BOLD}${GREEN}\u@\h${OFF} ${BOLD}${BLUE}\w${OFF}${BOLD}${RED}\$(parse_git_branch)${OFF} ${BOLD}${BLUE}\$${OFF} "
# }

# PROMPT_COMMAND=light_prompt_command

if [ -f ~/repos/dotfiles/lib/git-prompt.sh ]; then
    source ~/repos/dotfiles/lib/git-prompt.sh
fi

GIT_PS1_SHOWCOLORHINTS=1

PROMPT_COMMAND='__git_ps1 "`highlight_exit_code`${BOLD}${AQUA}\u@\h${OFF} ${BOLD}${BLUE}\w${OFF}" " $ " " [%s]"'

# vim:ft=sh:
